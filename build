#!/usr/bin/env node
const marked = require('marked');
const newDompurify = require('dompurify');
const { JSDOM } = require('jsdom');
const window = new JSDOM('').window;
const dompurify = newDompurify( window );
const handlebars = require('handlebars');
const highlight = require('highlight.js');
const jsyaml = require('js-yaml');
const path = require('path');
const fs = require('fs');

const fileRe = /\.md$/;
const files = [];
const dirs = ['.'];

process.chdir('docs');

while (dirs.length) {
    const dir = dirs.shift();
    const things = fs.readdirSync( dir );

    for (const thing of things) {
        const thingPath = path.join(dir, thing);
        const stat = fs.statSync( thingPath );

        if (stat.isDirectory()) {
            dirs.push( thingPath );
        }
        else if (stat.isFile() && fileRe.exec(thing)) {
            console.log(`Found: docs/${thingPath}`);
            files.push( thingPath );
        }
    }
}

process.chdir('..');

const pageRaw = fs.readFileSync( 'page.hbs' ).toString();
const pageTemplate = handlebars.compile( pageRaw );

const frontMatterRe = /^---\n(.*)\n---\n(.*)$/s;

marked.setOptions({
    highlight: function (code, lang) {
        return highlight.highlight( lang, code ).value;
    },
});

for (let mdFile of files) {
    const htmlFile = path.join( 'site', path.dirname( mdFile ), path.basename( mdFile, '.md' ) + '.html' );
    console.log(`Generating: ${htmlFile}`);
    mdFile = path.join( 'docs', mdFile );

    fs.mkdirSync( path.dirname( htmlFile ), {recursive:true} );

    const raw = fs.readFileSync( mdFile ).toString();
    const parts = frontMatterRe.exec( raw );
    const [yaml, md] = parts ? [ parts[1], parts[2] ] : [undefined, raw];

    const meta = yaml ? jsyaml.safeLoad( yaml ) : {};

    const dirtyHtml = marked( md );
    const cleanHtml = dompurify.sanitize( dirtyHtml );

    let pageHtml = pageTemplate({
        content: cleanHtml,
        ...meta,
    });

    fs.writeFileSync( htmlFile, pageHtml );
}
