#!/usr/bin/env node
const marked = require('marked');
const handlebars = require('handlebars');
const highlight = require('highlight.js');
const jsyaml = require('js-yaml');
const path = require('path');
const fs = require('fs');
const { execSync } = require('child_process');

execSync( 'rm -rf site/docs/*' );

const files = fs.readdirSync( 'docs' ).sort();
const docs = [];
for (const file of files) {
  docs.push( loadDoc( file ) );
}

docs.sort( (a,b) => {
  if (a.modifyEpoch == b.modifyEpoch) {
    return a.title > b.title ? 1 : -1;
  }
  return a.modifyEpoch < b.modifyEpoch ? 1 : -1;
});

const pageRaw = fs.readFileSync( 'page.hbs' ).toString();
const pageTemplate = handlebars.compile( pageRaw );

marked.setOptions({
  highlight: function (code, lang) {
    return highlight.highlight( lang || 'text', code ).value;
  },
});

for (const doc of docs) {
  console.log( `Generating: ${doc.htmlFile}` );

  fs.mkdirSync( path.dirname( doc.htmlFile ), {recursive:true} );
  
  const mdTemplate = handlebars.compile( doc.md );
  const finalMd = mdTemplate({
    showComments: true,
    ...doc,
    docs,
  });
  
  const mdHtml = marked( finalMd );

  const pageHtml = pageTemplate({
    showComments: true,
    ...doc,
    docs,
    content: mdHtml,
  });

  fs.writeFileSync( doc.htmlFile, pageHtml );
}

console.log( 'Running: git add -A site/docs' );
execSync('git add -A site/docs');

function loadDoc (file) {
  const mdFile = path.join( 'docs', file );
  console.log( `Loading: ${mdFile}` );

  const frontMatterRe = /^---\n(.*)\n---\n(.*)$/s;

  const raw = fs.readFileSync( mdFile ).toString();
  const parts = frontMatterRe.exec( raw );
  const [yaml, md] = parts ? [ parts[1], parts[2] ] : [undefined, raw];
  const meta = yaml ? jsyaml.safeLoad( yaml ) : {};

  meta.md = md;
  meta.tags = meta.tags ? meta.tags.sort() : [];

  meta.urlPath = meta.urlPath || path.join( path.dirname( mdFile ), path.basename( mdFile, '.md' ) + '.html' );
  meta.htmlFile = path.join( 'site', meta.urlPath );

  let logLines = execSync(
    `git log --pretty=format:"%as" -- ${mdFile}`,
  ).toString().split("\n");
  meta.createYear = logLines[ logLines.length - 1 ].split("-")[0];
  meta.modifyDate = logLines[0];

  logLines = execSync(
    `git log --pretty=format:"%at" -- ${mdFile}`,
  ).toString().split("\n");
  meta.modifyEpoch = logLines[0];

  return meta;
}
